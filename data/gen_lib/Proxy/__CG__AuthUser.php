<?php

namespace Proxy\__CG__\Auth;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class User extends \Auth\User implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'id', 'name', 'passwd', 'email', 'image', 'status', 'roles', 'logins', 'attr'];
        }

        return ['__isInitialized__', 'id', 'name', 'passwd', 'email', 'image', 'status', 'roles', 'logins', 'attr'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (User $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setLogin($login)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setLogin', [$login]);

        return parent::setLogin($login);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogin()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogin', []);

        return parent::getLogin();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function isGuest()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isGuest', []);

        return parent::isGuest();
    }

    /**
     * {@inheritDoc}
     */
    public function isAuth()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isAuth', []);

        return parent::isAuth();
    }

    /**
     * {@inheritDoc}
     */
    public function isActive()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isActive', []);

        return parent::isActive();
    }

    /**
     * {@inheritDoc}
     */
    public function setPasswd($pwd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPasswd', [$pwd]);

        return parent::setPasswd($pwd);
    }

    /**
     * {@inheritDoc}
     */
    public function checkPasswd($pwd)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'checkPasswd', [$pwd]);

        return parent::checkPasswd($pwd);
    }

    /**
     * {@inheritDoc}
     */
    public function getAllPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAllPermissions', []);

        return parent::getAllPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function canAccess($name, $data = array (
))
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'canAccess', [$name, $data]);

        return parent::canAccess($name, $data);
    }

    /**
     * {@inheritDoc}
     */
    public function getPasswd()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPasswd', []);

        return parent::getPasswd();
    }

    /**
     * {@inheritDoc}
     */
    public function addRole(\Auth\Access\Role $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRole', [$roles]);

        return parent::addRole($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRole(\Auth\Access\Role $roles)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRole', [$roles]);

        return parent::removeRole($roles);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoles()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoles', []);

        return parent::getRoles();
    }

    /**
     * {@inheritDoc}
     */
    public function addPermission(\Auth\Access\Permission $permissions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPermission', [$permissions]);

        return parent::addPermission($permissions);
    }

    /**
     * {@inheritDoc}
     */
    public function removePermission(\Auth\Access\Permission $permissions)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePermission', [$permissions]);

        return parent::removePermission($permissions);
    }

    /**
     * {@inheritDoc}
     */
    public function getPermissions()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPermissions', []);

        return parent::getPermissions();
    }

    /**
     * {@inheritDoc}
     */
    public function setEmail($email)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setEmail', [$email]);

        return parent::setEmail($email);
    }

    /**
     * {@inheritDoc}
     */
    public function getEmail()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getEmail', []);

        return parent::getEmail();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage($image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function addLogin(\Auth\Login $logins)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLogin', [$logins]);

        return parent::addLogin($logins);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLogin(\Auth\Login $logins)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLogin', [$logins]);

        return parent::removeLogin($logins);
    }

    /**
     * {@inheritDoc}
     */
    public function getLogins()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLogins', []);

        return parent::getLogins();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function get($name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'get', [$name, $default]);

        return parent::get($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function set($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'set', [$name, $value]);

        return parent::set($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr($attr)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr', [$attr]);

        return parent::setAttr($attr);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr', []);

        return parent::getAttr();
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', []);

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function save($flush = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'save', [$flush]);

        return parent::save($flush);
    }

    /**
     * {@inheritDoc}
     */
    public function delete($flush = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', [$flush]);

        return parent::delete($flush);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

}
