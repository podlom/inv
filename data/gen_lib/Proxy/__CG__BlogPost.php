<?php

namespace Proxy\__CG__\Blog;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Post extends \Blog\Post implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'categories', 'rubrics', 'id', 'h1', 'status', 'deleted', 'published', 'image', 'short_text', 'user', 'parts', 'route', 'subpath', 'parent', 'sort1', 'past2', 'rating', 'created', 'updated', 'attr', 'analytics', 'meta'];
        }

        return ['__isInitialized__', 'categories', 'rubrics', 'id', 'h1', 'status', 'deleted', 'published', 'image', 'short_text', 'user', 'parts', 'route', 'subpath', 'parent', 'sort1', 'past2', 'rating', 'created', 'updated', 'attr', 'analytics', 'meta'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Post $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getPath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPath', []);

        return parent::getPath();
    }

    /**
     * {@inheritDoc}
     */
    public function getRubrics()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRubrics', []);

        return parent::getRubrics();
    }

    /**
     * {@inheritDoc}
     */
    public function getCategories()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategories', []);

        return parent::getCategories();
    }

    /**
     * {@inheritDoc}
     */
    public function addRubric(\Blog\Rubric $rubric)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addRubric', [$rubric]);

        return parent::addRubric($rubric);
    }

    /**
     * {@inheritDoc}
     */
    public function removeRubric(\Blog\Rubric $rubric)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeRubric', [$rubric]);

        return parent::removeRubric($rubric);
    }

    /**
     * {@inheritDoc}
     */
    public function addCategory(\Blog\Category $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addCategory', [$category]);

        return parent::addCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function removeCategory(\Blog\Category $category)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeCategory', [$category]);

        return parent::removeCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getParent()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParent', []);

        return parent::getParent();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

    /**
     * {@inheritDoc}
     */
    public function getModelName($action)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getModelName', [$action]);

        return parent::getModelName($action);
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function setH1($h1)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setH1', [$h1]);

        return parent::setH1($h1);
    }

    /**
     * {@inheritDoc}
     */
    public function getH1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getH1', []);

        return parent::getH1();
    }

    /**
     * {@inheritDoc}
     */
    public function setImage(\Core\Image $image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImage', [$image]);

        return parent::setImage($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImage', []);

        return parent::getImage();
    }

    /**
     * {@inheritDoc}
     */
    public function hasImage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasImage', []);

        return parent::hasImage();
    }

    /**
     * {@inheritDoc}
     */
    public function setShortText($shortText)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setShortText', [$shortText]);

        return parent::setShortText($shortText);
    }

    /**
     * {@inheritDoc}
     */
    public function getShortText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getShortText', []);

        return parent::getShortText();
    }

    /**
     * {@inheritDoc}
     */
    public function setRoute($route)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRoute', [$route]);

        return parent::setRoute($route);
    }

    /**
     * {@inheritDoc}
     */
    public function getRoute()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRoute', []);

        return parent::getRoute();
    }

    /**
     * {@inheritDoc}
     */
    public function getVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisible', []);

        return parent::getVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisible($visible)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisible', [$visible]);

        return parent::setVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getPublished()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPublished', []);

        return parent::getPublished();
    }

    /**
     * {@inheritDoc}
     */
    public function setPublished($published)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPublished', [$published]);

        return parent::setPublished($published);
    }

    /**
     * {@inheritDoc}
     */
    public function getSubpath()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSubpath', []);

        return parent::getSubpath();
    }

    /**
     * {@inheritDoc}
     */
    public function setSubpath($subpath)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setSubpath', [$subpath]);

        return parent::setSubpath($subpath);
    }

    /**
     * {@inheritDoc}
     */
    public function getContentParts($name = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContentParts', [$name]);

        return parent::getContentParts($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getParts()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getParts', []);

        return parent::getParts();
    }

    /**
     * {@inheritDoc}
     */
    public function setParts($parts)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParts', [$parts]);

        return parent::setParts($parts);
    }

    /**
     * {@inheritDoc}
     */
    public function getPart($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPart', [$id]);

        return parent::getPart($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getImages()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImages', []);

        return parent::getImages();
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle($name = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', [$name]);

        return parent::getTitle($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title, $name = 'content')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title, $name]);

        return parent::setTitle($title, $name);
    }

    /**
     * {@inheritDoc}
     */
    public function getContent($name = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getContent', [$name]);

        return parent::getContent($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setContent($text, $name = 'content', $title = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setContent', [$text, $name, $title]);

        return parent::setContent($text, $name, $title);
    }

    /**
     * {@inheritDoc}
     */
    public function addPart(\Core\PagePart $part)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addPart', [$part]);

        return parent::addPart($part);
    }

    /**
     * {@inheritDoc}
     */
    public function removePart(\Core\PagePart $part)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removePart', [$part]);

        return parent::removePart($part);
    }

    /**
     * {@inheritDoc}
     */
    public function setUser(\Auth\User $user)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUser', [$user]);

        return parent::setUser($user);
    }

    /**
     * {@inheritDoc}
     */
    public function getUser()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUser', []);

        return parent::getUser();
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', []);

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function getRating()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRating', []);

        return parent::getRating();
    }

    /**
     * {@inheritDoc}
     */
    public function getSort1()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getSort1', []);

        return parent::getSort1();
    }

    /**
     * {@inheritDoc}
     */
    public function getPast2()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPast2', []);

        return parent::getPast2();
    }

    /**
     * {@inheritDoc}
     */
    public function save($flush = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'save', [$flush]);

        return parent::save($flush);
    }

    /**
     * {@inheritDoc}
     */
    public function delete($flush = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', [$flush]);

        return parent::delete($flush);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getCreated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCreated', []);

        return parent::getCreated();
    }

    /**
     * {@inheritDoc}
     */
    public function setCreated($date)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreated', [$date]);

        return parent::setCreated($date);
    }

    /**
     * {@inheritDoc}
     */
    public function getUpdated()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUpdated', []);

        return parent::getUpdated();
    }

    /**
     * {@inheritDoc}
     */
    public function setUpdated($updated)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUpdated', [$updated]);

        return parent::setUpdated($updated);
    }

    /**
     * {@inheritDoc}
     */
    public function _timestamps_on_update()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '_timestamps_on_update', []);

        return parent::_timestamps_on_update();
    }

    /**
     * {@inheritDoc}
     */
    public function _timestamps_on_persist()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '_timestamps_on_persist', []);

        return parent::_timestamps_on_persist();
    }

    /**
     * {@inheritDoc}
     */
    public function getRawAttr($name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getRawAttr', [$name, $default]);

        return parent::getRawAttr($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setRawAttr($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setRawAttr', [$name, $value]);

        return parent::setRawAttr($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttributes()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttributes', []);

        return parent::getAttributes();
    }

    /**
     * {@inheritDoc}
     */
    public function getAttrs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttrs', []);

        return parent::getAttrs();
    }

    /**
     * {@inheritDoc}
     */
    public function hasAttr($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'hasAttr', [$name]);

        return parent::hasAttr($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr($name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr', [$name, $default]);

        return parent::getAttr($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr', [$name, $value]);

        return parent::setAttr($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function printAttr($name, $default = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'printAttr', [$name, $default]);

        return parent::printAttr($name, $default);
    }

    /**
     * {@inheritDoc}
     */
    public function getAnalytics()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAnalytics', []);

        return parent::getAnalytics();
    }

    /**
     * {@inheritDoc}
     */
    public function getViews()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getViews', []);

        return parent::getViews();
    }

    /**
     * {@inheritDoc}
     */
    public function getMeta()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getMeta', []);

        return parent::getMeta();
    }

    /**
     * {@inheritDoc}
     */
    public function setMeta(\Metadata\MetaPage $meta)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setMeta', [$meta]);

        return parent::setMeta($meta);
    }

}
