<?php

namespace Proxy\__CG__\Core;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Image extends \Core\Image implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Persistence\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Common\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array properties to be lazy loaded, with keys being the property
     *            names and values being their default values
     *
     * @see \Doctrine\Common\Persistence\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = [];



    /**
     * @param \Closure $initializer
     * @param \Closure $cloner
     */
    public function __construct($initializer = null, $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', 'url', 'data', 'id', 'title', 'name', 'page', 'text', 'tag', 'attributes', 'name_space', 'base_name', 'parent', 'childs'];
        }

        return ['__isInitialized__', 'url', 'data', 'id', 'title', 'name', 'page', 'text', 'tag', 'attributes', 'name_space', 'base_name', 'parent', 'childs'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Image $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy->__getLazyProperties() as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * {@inheritDoc}
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);

        parent::__clone();
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function getData()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getData', []);

        return parent::getData();
    }

    /**
     * {@inheritDoc}
     */
    public function getAlt()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAlt', []);

        return parent::getAlt();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageName', [$name]);

        return parent::setImageName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageName', []);

        return parent::getImageName();
    }

    /**
     * {@inheritDoc}
     */
    public function getImageId()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageId', []);

        return parent::getImageId();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function getUrl()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getUrl', []);

        return parent::getUrl();
    }

    /**
     * {@inheritDoc}
     */
    public function setUrl($url)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setUrl', [$url]);

        return parent::setUrl($url);
    }

    /**
     * {@inheritDoc}
     */
    public function addEffect($name, $args)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addEffect', [$name, $args]);

        return parent::addEffect($name, $args);
    }

    /**
     * {@inheritDoc}
     */
    public function preview($w, $h = NULL, $method = 'thumbup')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'preview', [$w, $h, $method]);

        return parent::preview($w, $h, $method);
    }

    /**
     * {@inheritDoc}
     */
    public function thumb($w, $h = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'thumb', [$w, $h]);

        return parent::thumb($w, $h);
    }

    /**
     * {@inheritDoc}
     */
    public function thumbup($w, $h = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'thumbup', [$w, $h]);

        return parent::thumbup($w, $h);
    }

    /**
     * {@inheritDoc}
     */
    public function resize($w, $h = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'resize', [$w, $h]);

        return parent::resize($w, $h);
    }

    /**
     * {@inheritDoc}
     */
    public function jsonSerialize()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'jsonSerialize', []);

        return parent::jsonSerialize();
    }

    /**
     * {@inheritDoc}
     */
    public function setText($text)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setText', [$text]);

        return parent::setText($text);
    }

    /**
     * {@inheritDoc}
     */
    public function getText()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getText', []);

        return parent::getText();
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setName(string $name, $ns = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name, $ns]);

        return parent::setName($name, $ns);
    }

    /**
     * {@inheritDoc}
     */
    public function getTitle()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTitle', []);

        return parent::getTitle();
    }

    /**
     * {@inheritDoc}
     */
    public function setTitle($title)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setTitle', [$title]);

        return parent::setTitle($title);
    }

    /**
     * {@inheritDoc}
     */
    public function getPage()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPage', []);

        return parent::getPage();
    }

    /**
     * {@inheritDoc}
     */
    public function setPage(\Core\Page $page)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPage', [$page]);

        return parent::setPage($page);
    }

    /**
     * {@inheritDoc}
     */
    public function addFields(\Skynar\Form\FormPart $form)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addFields', [$form]);

        return parent::addFields($form);
    }

    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function save($flush = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'save', [$flush]);

        return parent::save($flush);
    }

    /**
     * {@inheritDoc}
     */
    public function delete($flush = false)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'delete', [$flush]);

        return parent::delete($flush);
    }

    /**
     * {@inheritDoc}
     */
    public function getTag()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTag', []);

        return parent::getTag();
    }

    /**
     * {@inheritDoc}
     */
    public function toHtml()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'toHtml', []);

        return parent::toHtml();
    }

    /**
     * {@inheritDoc}
     */
    public function printAttrs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'printAttrs', []);

        return parent::printAttrs();
    }

    /**
     * {@inheritDoc}
     */
    public function open()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'open', []);

        return parent::open();
    }

    /**
     * {@inheritDoc}
     */
    public function close()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'close', []);

        return parent::close();
    }

    /**
     * {@inheritDoc}
     */
    public function attr($name, $value = 'NO VALUE')
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'attr', [$name, $value]);

        return parent::attr($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function getAttr($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getAttr', [$name]);

        return parent::getAttr($name);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttr($name, $value)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttr', [$name, $value]);

        return parent::setAttr($name, $value);
    }

    /**
     * {@inheritDoc}
     */
    public function setAttrs($attributes)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setAttrs', [$attributes]);

        return parent::setAttrs($attributes);
    }

    /**
     * {@inheritDoc}
     */
    public function getOutputAttrs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getOutputAttrs', []);

        return parent::getOutputAttrs();
    }

    /**
     * {@inheritDoc}
     */
    public function clearAttrs()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'clearAttrs', []);

        return parent::clearAttrs();
    }

    /**
     * {@inheritDoc}
     */
    public function setId($id)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setId', [$id]);

        return parent::setId($id);
    }

    /**
     * {@inheritDoc}
     */
    public function getNameSpace()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getNameSpace', []);

        return parent::getNameSpace();
    }

    /**
     * {@inheritDoc}
     */
    public function setNameSpace($ns)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setNameSpace', [$ns]);

        return parent::setNameSpace($ns);
    }

    /**
     * {@inheritDoc}
     */
    public function getBaseName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getBaseName', []);

        return parent::getBaseName();
    }

    /**
     * {@inheritDoc}
     */
    public function setBaseName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setBaseName', [$name]);

        return parent::setBaseName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function addClass($class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addClass', [$class]);

        return parent::addClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function getClasses()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getClasses', []);

        return parent::getClasses();
    }

    /**
     * {@inheritDoc}
     */
    public function removeClass($class)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeClass', [$class]);

        return parent::removeClass($class);
    }

    /**
     * {@inheritDoc}
     */
    public function addChild($child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChild', [$child]);

        return parent::addChild($child);
    }

    /**
     * {@inheritDoc}
     */
    public function setChild($name, $child)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setChild', [$name, $child]);

        return parent::setChild($name, $child);
    }

    /**
     * {@inheritDoc}
     */
    public function addChilds($childs)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addChilds', [$childs]);

        return parent::addChilds($childs);
    }

    /**
     * {@inheritDoc}
     */
    public function getChilds()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getChilds', []);

        return parent::getChilds();
    }

    /**
     * {@inheritDoc}
     */
    public function removeChilds()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeChilds', []);

        return parent::removeChilds();
    }

    /**
     * {@inheritDoc}
     */
    public function setParent($parent)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setParent', [$parent]);

        return parent::setParent($parent);
    }

}
